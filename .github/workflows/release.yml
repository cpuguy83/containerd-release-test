on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Containerd Release

jobs:
  check:
    name: Check Signed Tag
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    outputs:
      stringver: ${{ steps.contentrel.outputs.stringver }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: src/github.com/containerd/containerd

      - name: Check signature
        run: |
          releasever=${{ github.ref }}
          releasever="${releasever#refs/tags/}"
          TAGCHECK=$(git tag -v ${releasever} 2>&1 >/dev/null) ||
          echo "${TAGCHECK}" | grep -q "error" && {
              echo "::error::tag ${releasever} is not a signed tag. Failing release process."
              exit 1
          } || {
              echo "Tag ${releasever} is signed."
              exit 0
          }
        working-directory: src/github.com/containerd/containerd

      - name: Release content
        id: contentrel
        run: |
          RELEASEVER=${{ github.ref }}
          echo "::set-output name=stringver::${RELEASEVER#refs/tags/v}"
          git tag -l ${RELEASEVER#refs/tags/} -n20000 | tail -n +3 | cut -c 5- >release-notes.md
        working-directory: src/github.com/containerd/containerd

      - name: Save release notes
        uses: actions/upload-artifact@v2
        with:
          name: containerd-release-notes
          path: src/github.com/containerd/containerd/release-notes.md

  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [check]
    timeout-minutes: 10

    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.2'
      - name: Set env
        shell: bash
        env:
          MOS: ${{ matrix.os }}
        run: |
          echo "RELEASE_VER=${releasever}" >> $GITHUB_ENV
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
      - name: Checkout containerd
        uses: actions/checkout@v2
        with:
          # Intentionally use github.repository instead of containerd/containerd to
          # make this action runnable on forks.
          # See https://github.com/containerd/containerd/issues/5098 for the context.
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          path: src/github.com/containerd/containerd

      - name: Make
        shell: bash
        run: |
          # For Windows the cni build script generates a config but shells out to powershell (and also assume it is running on windows) to get a gateway and subnet.
          # The values provided here are taken from packages that we previously generated.
          docker build --build-arg RELEASE_VER --build-arg GATEWAY=172.21.16.1 --build-arg PREFIX_LEN=12 -f .github/workflows/release/Dockerfile.${{matrix.os}} --platform=windows/amd64 -o _output/ .

          docker build --build-arg RELEASE_VER -f .github/workflows/release/Dockerfile.${{matrix.os}} --platform=linux/arm64 -o _output/ .
          docker build --build-arg RELEASE_VER -f .github/workflows/release/Dockerfile.${{matrix.os}} --platform=linux/amd64 -o _output/ .
        working-directory: src/github.com/containerd/containerd
      - name: Save Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-tars
          path: src/github.com/containerd/containerd/releases/*.tar.gz*

  release:
    name: Create containerd Release
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    needs: [build, check]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Download builds and release notes
        uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: process.env.GITHUB_REF,
              draft: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }},
              target_commitish: sha
            });

            for (let file of await fs.readdir('./builds/release-tars')) {
              console.log('uploading', file);

              const { repo: { owner, repo }, sha } = context;
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./${file}`)
              });
            }